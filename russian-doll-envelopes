// Time Complexity :O(nlogn)
// Space Complexity :O(n)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no
// Your code here along with comments explaining your approach:first sort the arrays in the order of weights in ascending order and if weights are same then sort according to heights in decresing order for those elements binary search approach where taking an array to process the elements and lets add first height to arr then check with  next elemnt when we count greater height than arr last index value then added and incremented as increasing the length ,if encounter a smaller height that the last index of array element just search for next greater eleemnt and replace that finally return length

class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        Arrays.sort(envelopes,(a,b)->{
            if(a[0] == b[0]){
              return b[1]-a[1];//if weights are same sort heights in dec
            }
            return a[0]-b[0];//asc weights
        });
        int n = envelopes.length;
        int[] arr=new int[n];
        arr[0]=envelopes[0][1];//taking first height
        int len=1;
        for(int i=1;i<n;i++){
            if(arr[len-1] < envelopes[i][1]){//if get greater height than last processed one in array 
                arr[len]=envelopes[i][1];
                len++;
            }else{
                int idx=binarySearch(arr,0,len-1,envelopes[i][1]);//next greater of smaller height which we encounter
                 arr[idx]=envelopes[i][1];//replacing next greater ele index with small
            }
        }
        return len;
    }
   
     private int binarySearch(int[] arr,int low,int high,int target){//next greater ele of smaller height which we encounter to replace
            while(low<=high){
                int mid=low+(high-low)/2;
                if(arr[mid] == target){
                    return mid;
                }else if(arr[mid]>target){
                    high=mid-1;
                }else{
                    low=mid+1;
                }

            }
            return low;
        }
}